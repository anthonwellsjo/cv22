import { Canvas } from '@react-three/fiber'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { createRef, useEffect, useRef, useState } from 'react'
import styles from '../styles/Home.module.css'
import BlackSheet from '../components/BlackSheet'
import Chapter from '../components/Chapter'
import IndexHolder from '../components/IndexHolder'
import BioPage from '../components/Pages/Bio'
import IntroPage from '../components/Pages/Intro'
import PageWrapper from '../components/Pages/PageWrapper'
import ScrollBar from '../components/ScrollBar'
import { getClosestThreshold, getNewTouchScroll, getScrollPosition, scrollCalculator } from '../components/utils/scroll-helpers'
import { thresHolds } from '../components/utils/app-config'
import Title from '../components/Pages/Title'
import TextWrapper from '../components/Pages/TextWrapper'

const Home: NextPage = () => {
  const [scroll, setScroll] = useState(0);
  const [currentTouch, setCurrentTouch] = useState<{ Y: number, X: number }>({ Y: 0.1, X: 0.1 });
  const touchStateRef = useRef(currentTouch);
  const setCurrentTouchExpanded = (Y: number, X: number) => {
    setCurrentTouch({ X: X, Y: Y });
    touchStateRef.current = ({ X: X, Y: Y });
  };
  let scrollDoneTimer: NodeJS.Timeout;

  const divRef: React.LegacyRef<HTMLDivElement> | undefined = createRef();

  const onScrollFinished = () => {
    console.log("scroll finished");
    const newScroll = scroll;
    const threshold = getClosestThreshold(newScroll);
    if (threshold) setScroll(threshold + 2.5);
  }

  const scroller: (e: any) => any = (e: any) => {
    e.preventDefault();
    clearTimeout(scrollDoneTimer);

    const Y = e.wheelDeltaY;
    const X = e.wheelDeltaX;
    const newValue = scrollCalculator(Y, X);
    console.log("nromal scroll", newValue);

    setScroll(prev => (prev - newValue));


    // scrollDoneTimer = setTimeout(() => {
    //   onScrollFinished();
    // }, 300)

  }


  function mobileScroller(this: HTMLDivElement, e: TouchEvent) {
    e.preventDefault();
    const Y = e.changedTouches[0].clientY;
    const X = e.changedTouches[0].clientX;
    console.log("scrolling!!!", Y, X);
    clearTimeout(scrollDoneTimer);
    console.log("new touch", Y, X);

    if (touchStateRef.current.Y - Y <= 30) {
      const yes = getNewTouchScroll({ Y: touchStateRef.current.Y, X: touchStateRef.current.X }, { X: X, Y: Y })

      console.log("mobile scroll", yes);
      if (yes < 2 && yes > -2) {
        setScroll(prev => (prev + yes))
      }
    }

    setCurrentTouchExpanded(Y, X);



    // scrollDoneTimer = setTimeout(() => {
    //   onScrollFinished();
    // }, 300)

  }


  const onChapterClickEventHandler = (position: number) => {
    setScroll(getScrollPosition(position));
  }


  useEffect(() => {
    divRef.current?.addEventListener("wheel", scroller);
    divRef.current?.addEventListener("touchmove", mobileScroller);
  }, [])

  return (
    <div ref={divRef != null ? divRef : null} style={{ width: "100%", height: "100%", display: "flex", justifyContent: "center", position: "absolute" }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="preload"
          href="/fonts/ReenieBeanie/ReenieBeanie.ttf"
          as="font"
          crossOrigin=""
        />
      </Head>

      <div style={{ width: "90%", maxWidth: "1000px", minWidth: "300px", backgroundColor: "red", height: "100vh", }}>
        <Canvas style={{ width: "100%", backgroundColor: "white" }}>
          <ambientLight />
          <spotLight castShadow={true} position={[100, 100, 100]} />
          <pointLight position={[100, 100, 100]} />
          <pointLight position={[100, 100, 100]} />
          <BlackSheet scroll={scroll} position={[0, 0, 0]} />
        </Canvas>
      </div>

      <PageWrapper scroll={scroll} zone={[0, thresHolds[0]]}>
        <IntroPage />
        {/* <TextWrapper scroll={scroll} zone={[0, thresHolds[0]]} > */}
        <div style={{ width: "2px", height: "2px", backgroundColor: "black" }} />
        {/* </TextWrapper> */}
      </PageWrapper>
      <PageWrapper scroll={scroll} zone={[thresHolds[0] + 0.01, thresHolds[1]]}>
        <Title scroll={scroll} name="Bio" />
        <TextWrapper scroll={scroll} zone={[thresHolds[0] + 0.01, thresHolds[1]]}>
          <BioPage />
        </TextWrapper>
      </PageWrapper>
      <PageWrapper scroll={scroll} zone={[thresHolds[1] + 0.01, thresHolds[2]]}>
        <Title scroll={scroll} name="Skills" />
      </PageWrapper>
      <PageWrapper scroll={scroll} zone={[thresHolds[2] + 0.01, thresHolds[3]]}>
        <Title scroll={scroll} name="CV" />
      </PageWrapper>
      <PageWrapper scroll={scroll} zone={[thresHolds[3] + 0.01, thresHolds[4]]}>
        <Title scroll={scroll} name="Social" />
      </PageWrapper>
      <IndexHolder>
        <ScrollBar {...{ scroll }} />
        <Chapter onClickEvent={onChapterClickEventHandler} position={5} {...{ scroll }} />
        <Chapter onClickEvent={onChapterClickEventHandler} title={"bio"} position={20} {...{ scroll }} />
        <Chapter onClickEvent={onChapterClickEventHandler} title={"skills"} position={40} {...{ scroll }} />
        <Chapter onClickEvent={onChapterClickEventHandler} title={"curriculum"} position={60} {...{ scroll }} />
        <Chapter onClickEvent={onChapterClickEventHandler} title={"social"} position={80} {...{ scroll }} />
        <Chapter onClickEvent={onChapterClickEventHandler} position={95} {...{ scroll }} />
      </IndexHolder>
    </div>
  )
}

export default Home



